using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using PharmacyAdjudicator.Library.Core;
using PharmacyAdjudicator.Library.Core.Rules;

namespace PharmacyAdjudicator.TestLibrary.CoreTests.RulesTests
{
    [TestClass]
    public class AtomTests
    {
        //[TestInitialize()]
        [ClassInitialize()]
        public static void Setup(TestContext testContext)
        {
            var principal = new System.Security.Principal.GenericPrincipal(
                new System.Security.Principal.GenericIdentity("Test"),
                new string[] { "RuleManager" });
            //var principal = new System.Security.Principal.GenericPrincipal(
            //    new System.Security.Principal.GenericIdentity("Test"),
            //    new string[] { "PatientViewer" });
            Csla.ApplicationContext.User = principal;

            //Using SQL Server script to recreate the datC:\Users\sdenison\work\Projects\PharmacyClaimAdjudicator\src\PharmacyAdjudicator\PharmacyAdjudicator.LibraryTests\CoreTests\RulesTests\AtomTests.csabase
            System.Diagnostics.Process proc = new System.Diagnostics.Process();
            proc.StartInfo.FileName = "Scripts\\recreate_database.bat";
            proc.StartInfo.RedirectStandardError = false;
            proc.StartInfo.RedirectStandardOutput = false;
            proc.StartInfo.UseShellExecute = false;
            proc.Start();
            proc.WaitForExit();
        }

        [TestMethod]
        public void Can_create_formulary_true_atom()
        {
            var myAtom = Atom.NewAtom();
            myAtom.Class = "Transaction";
            myAtom.Property = "Formulary";
            myAtom.Value = "True";

            myAtom.Save();

            NxBRE.InferenceEngine.Rules.Atom nxBreAtom = myAtom.GetInferenceEngineAtom();
            Assert.AreEqual(nxBreAtom.Type, myAtom.Property);
        }

        [TestMethod]
        public void Can_retrieve_an_atom_and_update_values()
        {
            var myAtom = Atom.NewAtom();
            myAtom.Class = "Transaction";
            myAtom.Property = "Formulary";
            myAtom.Value = false;
            myAtom = myAtom.Save();

            //Changing Atom.Value to object from string
            //Assert.AreEqual(myAtom.Value, "False");
            Assert.AreEqual(myAtom.Value, false);

            //Pull the atom from the database using the GUID generated by the NewAtom method
            var atomFromDatabase = Library.Core.Rules.Atom.GetByAtomId(myAtom.AtomId);
            Assert.AreEqual(atomFromDatabase.Value, false);

            atomFromDatabase.Value = true;
            atomFromDatabase = atomFromDatabase.Save();
            Assert.IsTrue(true);
        }

        [TestMethod]
        public void Can_get_clr_type_when_property_is_set()
        {
            var myAtom = Atom.NewAtom();
            //Default type 
            Assert.IsTrue(myAtom.ClrType == typeof(string));

            myAtom.Class = "Drug";
            //Should still be default because property is not set
            Assert.IsTrue(myAtom.ClrType == typeof(string));

            myAtom.Property = "Otc";
            Assert.IsTrue(myAtom.ClrType == typeof(Boolean));

            //Changing the class to transaction should bring back default ClrType
            myAtom.Class = "Transaction";
            Assert.IsTrue(myAtom.ClrType == typeof(string));

            myAtom.Property = "IngredientCostSubmitted";
            Assert.IsTrue(myAtom.ClrType == typeof(decimal));
        }

        [TestMethod]
        public void Atom_has_list_of_allowed_classes()
        {
            var atom = Atom.NewAtom();
            Assert.IsTrue(atom.AllowedClasses.Count > 0);
        }

        [TestMethod]
        public void Atom_has_no_allowed_properties_when_Class_property_is_not_set()
        {
            var atom = Atom.NewAtom();
            Assert.IsTrue(atom.AllowedClasses.Count > 0);
            Assert.IsTrue(string.IsNullOrEmpty(atom.Class));
            Assert.IsTrue(atom.AllowedProperties.Count == 0);
            //When a class is assigned the AllowedProperties list should have items.
            atom.Class = atom.AllowedClasses[0];
            Assert.IsTrue(atom.AllowedProperties.Count > 0);
        }

    }
}
